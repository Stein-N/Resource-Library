plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
}

base {
    archivesName = "${mod_name}-fabric-${minecraft_version}"
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    compileOnly project(":common")
}

sourceSets {
    testmod {
        runtimeClasspath += main.runtimeClasspath;
        compileClasspath += main.compileClasspath;
    }
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        testClient {
            client()
            setConfigName("Fabric Test Client")
            ideConfigGenerated(true)
            runDir("run")
            source sourceSets.testmod
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
    from file("src/main/generated")
    exclude 'icon_forge.png'
}